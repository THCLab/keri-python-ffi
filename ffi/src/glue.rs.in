use std::fmt;
use keriox_wrapper::controller::{SharedController};

foreign_class!(
    #[derive(Clone)]
    class Controller {
        self_type SharedController;
        private constructor = empty;
        fn SharedController::new(db_path: &str, address: &str, address_store_path: &str) -> Result<SharedController, Error>;
        // fn SharedController::new_from_seeds(db_path: &str, address: &str, seeds: &str, address_store_path: &str) -> Result<SharedEntity, Error>;
        fn SharedController::get_did_doc(&self, id: &str) -> Result<String, Error>;
        fn SharedController::update_keys(&mut self) -> Result<(), Error> ;
        // fn SharedController::append(&mut self, msg: &str) -> Result<(), Error>;

        fn SharedController::sign(&self, msg: &str) -> Result<Vec<u8>, Error>;
        fn SharedController::verify(&self, issuer_id: &str, msg: &str, signature: &str) -> Result<bool, Error>;
        
        fn SharedController::add_identifier(&mut self, db_path: &str) -> Result<(), Error>;
        fn SharedController::remove_identifier(&mut self, id: &str) -> Result<(), Error>;
        fn SharedController::current_identifiers(&self) -> Result<Vec<String>, Error>;
        fn SharedController::sign_by(&self, id: &str, msg: &str) -> Result<Vec<u8>, Error>;

        fn SharedController::run(self) -> Result<(), Error>;
        fn SharedController::get_prefix(&self) -> Result<String, Error>;
        fn SharedController::get_kerl(&self) -> Result<String, Error>;
        fn SharedController::get_formatted_kerl(&self) -> Result<String, Error>;
        fn SharedController::get_formatted_tel(&self, vc_dig: &str) -> Result<String, Error>;

        fn SharedController::verify_vc(&self, issuer_id: &str, vc: &str, signature: &[u8]) -> Result<bool, Error>;
        fn SharedController::issue_vc(&self, vc: &str) -> Result<Vec<u8>, Error>;
        fn SharedController::revoke_vc(&self, vc: &str) -> Result<(), Error>;
    }
);


